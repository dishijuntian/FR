# 增强版航班排名系统配置文件
# 集成深度特征工程和智能特征选择

# 路径配置
paths:
  data_dir: "data/aeroclub-recsys-2025"
  model_input_dir: "data/aeroclub-recsys-2025/processed"
  model_save_dir: "data/aeroclub-recsys-2025/models"
  output_dir: "data/aeroclub-recsys-2025/submissions"
  log_dir: "logs"

# 数据处理配置
data_processing:
  chunk_size: 200000
  n_processes: null # null=自动检测CPU核数
  force_encode: false
  force_segment: false
  force_feature: true
  verify_results: true
  force_reprocess: false
  
  # 特征工程配置
  feature_engineering:
    enabled: true
    
    # 基础特征类型
    basic_feature_types:
      - core           # 核心特征（价格、时间、舱位等）
      - route          # 路线特征
      - time           # 时间特征
      - ranker         # 基于ranker_id的特征
      - carrier        # 航空公司特征
      - passenger      # 乘客特征
      - interaction    # 基础交互特征
    
    # 增强特征工程
    enhanced_features:
      enabled: true
      types:
        - economic     # 经济学特征
        - behavioral   # 行为经济学特征
        - operational  # 运营特征
        - customer     # 客户细分特征
        - market       # 市场动态特征
        - temporal     # 时间序列特征
        - network      # 网络结构特征
        - competitive  # 竞争态势特征
        - anomaly      # 异常检测特征
        - meta         # 元特征
      max_features: 300
      
    # 自动特征发现
    auto_discovery:
      enabled: true
      max_features: 50
      methods:
        - arithmetic   # 算术组合特征
        - conditional  # 条件特征
        - ranking      # 排名特征
        - aggregation  # 聚合特征
    
  # 特征选择配置
  feature_selection:
    enabled: true
    strategy: "adaptive" # adaptive, manual, disabled
    
    # 自适应特征选择（推荐）
    adaptive_config:
      enabled: true
      max_features_ratio: 0.3  # 最大特征数占比
      min_features: 50
      max_features: 500
      auto_adjust_by_data_size: true
    
    # 手动特征选择配置
    manual_config:
      max_features: 200
      selection_methods:
        - variance      # 方差过滤
        - correlation   # 相关性过滤  
        - importance    # 重要性选择
        - statistical   # 统计方法选择
        - univariate    # 单变量选择
      
      # 过滤阈值
      variance_threshold: 0.01
      correlation_threshold: 0.95
      
      # 重要性方法配置
      importance_method: "lightgbm" # lightgbm, random_forest, lasso
      statistical_method: "mutual_info" # mutual_info, f_test, chi2
      
      # 采样配置
      sample_size: 50000
      early_stopping: true
      save_feature_importance: true
      
      # 集成策略
      ensemble_selection: true
      voting_threshold: 0.5 # 特征被选中的最小投票比例

# 优化训练配置
training:
  segments: [0, 1, 2]
  model_names: ['XGBRanker', 'LGBMRanker']
  use_gpu: true
  random_state: 42
  
  # 特征工程相关的训练配置
  feature_engineering_in_training:
    # 是否在训练时动态创建特征
    dynamic_features: false
    
    # 是否使用特征重要性进行在线筛选
    online_feature_selection: true
    online_selection_rounds: 3
    
    # 是否启用特征交互发现
    auto_interaction_discovery: false

# 自动数据集划分策略
auto_split_strategy:
  thresholds:
    1000: 3   # ≤1000个ranker: 2折
    2000: 3   # ≤2000个ranker: 3折  
    5000: 3   # ≤5000个ranker: 5折
    10000: 3  # ≤10000个ranker: 8折
    99999999: 3 # >10000个ranker: 10折

# 验证集大小调整策略  
validation_size_strategy:
  small_data_threshold: 100
  small_data_val_size: 0.3
  large_data_threshold: 10000
  large_data_val_size: 0.1
  default_val_size: 0.2

# 快速训练策略
fast_training:
  enabled: true
  epochs:
    validation: 5
    final: 10
  early_stopping:
    enabled: true
    patience: 3
    min_delta: 0.001

# 内存优化
memory_optimization:
  clear_cache: true
  optimize_dtypes: true
  batch_processing: false
  
  # 特征工程相关的内存优化
  feature_engineering_memory:
    # 分批处理特征工程
    batch_feature_engineering: true
    batch_size: 100000
    
    # 中间结果缓存策略
    cache_intermediate_features: false
    cleanup_after_selection: true

# 模型参数配置
model_configs:
  XGBRanker:
    n_estimators: 200
    max_depth: 8
    learning_rate: 0.05
    
  LGBMRanker:
    n_estimators: 200
    max_depth: 8
    learning_rate: 0.05
    
  # 模型参数配置 
  model_configs:
    XGBRanker:
      n_estimators: 200
      max_depth: 8
      learning_rate: 0.05
      
    LGBMRanker:
      n_estimators: 200
      max_depth: 8
      learning_rate: 0.05
      
    RankNet:
      hidden_dims: [128, 64, 32]
      learning_rate: 0.001
      dropout_rate: 0.2

# 预测配置
prediction:
  segments: [0, 1, 2]
  model_names: ['XGBRanker', 'LGBMRanker']
  use_gpu: true
  enable_business_rules: false
  
  # 集成权重配置 (根据验证性能自动调整)
  ensemble_weights:
    XGBRanker: 0.4
    LGBMRanker: 0.4  
    RankNet: 0.2
    
  # 预测优化
  prediction_optimization:
    batch_size: 10000        # 预测批大小
    memory_efficient: true   # 内存高效模式
    cache_predictions: false # 是否缓存中间预测结果

# 性能监控配置
monitoring:
  # 是否启用性能监控
  enabled: true
  
  # 监控指标
  metrics:
    - training_time
    - memory_usage
    - validation_score
    - model_size
    
  # 性能阈值告警
  thresholds:
    max_training_time: 1800    # 最大训练时间(秒)
    max_memory_usage: 8192     # 最大内存使用(MB)
    min_validation_score: 0.5  # 最小验证分数

# 流水线配置
pipeline:
  run_data_processing: false
  run_training: true
  run_prediction: true
  
  # 并行策略
  parallel_strategy:
    # GPU可用时使用单进程+GPU, CPU时使用多进程
    auto_parallel: true
    max_workers: null  # null=自动检测

# 日志配置
logging:
  level: "INFO"
  format: "%(asctime)s | %(levelname)8s | %(name)s | %(message)s"
  datefmt: "%Y-%m-%d %H:%M:%S"
  
  # 详细日志选项
  detailed_logging:
    model_training: true     # 详细记录模型训练过程
    data_processing: true   # 数据处理详细日志
    memory_monitoring: true  # 内存监控日志
    performance_metrics: true # 性能指标日志

# 实验追踪配置
experiment_tracking:
  enabled: false
  # 如果启用，可以集成MLflow等工具
  backend: "mlflow"  
  experiment_name: "flight_ranking_optimized"